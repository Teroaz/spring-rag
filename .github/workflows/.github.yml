name: Java 23 Build

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: spring-rag
  DOCKER_REGISTRY_URL: ghcr.io
  DOCKER_USERNAME: teroaz

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 23
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '23'
          cache: gradle

      - name: Make Gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

  #  test:
  #    runs-on: ubuntu-latest
  #    needs: build
  #    steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v3
  #
  #      - name: Set up JDK 23
  #        uses: actions/setup-java@v3
  #        with:
  #          distribution: 'temurin'
  #          java-version: '23'
  #          cache: gradle
  #
  #      - name: Run tests
  #        run: ./gradlew test
  #
  #  package:
  #    runs-on: ubuntu-latest
  #    needs: build
  #    steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v3
  #
  #      - name: Set up JDK 23
  #        uses: actions/setup-java@v3
  #        with:
  #          distribution: 'temurin'
  #          java-version: '23'
  #          cache: gradle
  #
  #      - name: Jar with Gradle
  #        run: ./gradlew jar

  docker:
    runs-on: ubuntu-latest
    #    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 23
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '23'
          cache: gradle

      - name: Package with Gradle
        run: ./gradlew bootJar

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY_URL }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY_URL }}/${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}

  kubernetes:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v3
      - name: Start Kubernetes minikube
        uses: medyagh/setup-minikube@master
      - name: Try the Kubernetes cluster
        run: kubectl get nodes
      - name: Deploy the image to minikube
        run: |
          kubectl apply -f k8s/deployment.yaml
      - name: Get Kubernetes service URL
        run: |
          kubectl wait --for=condition=Ready pod -l app=spring-rag --timeout=120s
          kubectl get pods
          minikube service list
          SERVICE_URL=$(minikube service spring-rag --url)
          echo "${SERVICE_URL}/samples/EFREI"
          echo "------------------opening the service------------------"
          sleep 40
      - name: Test Kubernetes service URL
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 10
          max_attempts: 4
          command: curl $(minikube service spring-rag --url)/samples/EFREI
      - name: Log Kubernetes pods
        run: |
          kubectl logs $(kubectl get pods -l app=spring-rag -o name)